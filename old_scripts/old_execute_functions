#' Execute ME function with a dataframe
#' 
#' This is a helper function takes a data frame as input with 1 row of data and the following
#' columns and is given to [calculate_ME_requirement]: 
#' "An_BW", "Dt_DMIn", "Trg_MilkProd", "An_BW_mature", "Trg_FrmGain", 
#' "An_GestDay", "An_GestLength", "An_AgeDay", "Fet_BWbrth", "An_LactDay", 
#' "An_Parity_rl", "Trg_MilkFatp", "Trg_MilkTPp", "Trg_MilkLacp" and "Trg_RsrvGain"
#'
#' The columns required in the data frame are described in the [calculate_ME_requirement] function.
#'
#' @param df_in A data frame with 1 row of data and the required columns
#'
#' @return Trg_MEuse, A single number representing the Metabolizable Energy requirements (Mcal/d)
#' @export
#'
def dev_execute_ME_requirement(df_in):
    
  # check format of data frame. Would need to be 1 row only and contain the required column names.
  # 1. Select columns by name and check they are present
  required_columns = ["An_BW", "Dt_DMIn", "Trg_MilkProd", "An_BW_mature", "Trg_FrmGain", 
                      "An_GestDay", "An_GestLength", "An_AgeDay", "Fet_BWbrth", "An_LactDay", 
                      "An_Parity_rl", "Trg_MilkFatp", "Trg_MilkTPp", "Trg_MilkLacp", "Trg_RsrvGain"]
  
  df_subset = (df_in[required_columns]
               .apply(pd.to_numeric, errors = 'coerce')    # convert all columns to numbers
               ) 

  # 2. check number of rows and provide meaningful error
  if len(df_subset.index) > 1:
     raise Exception("Number of rows is greater than 1. This function calculates ME for 1 cow at a time.")
     
  # 3. convert to dictionary called var_dict.
  # This creates a named dictionary
  var_dict = df_subset.iloc[0].to_dict()

  ##########################################################################
  # Calculate Metabolizable Energy
  ##########################################################################
  An_BW = var_dict['An_BW']
  Dt_DMIn = var_dict['Dt_DMIn']
  Trg_MilkProd = var_dict['Trg_MilkProd']
  An_BW_mature = var_dict['An_BW_mature']
  Trg_FrmGain = var_dict['Trg_FrmGain']
  An_GestDay = var_dict['An_GestDay']
  An_GestLength = var_dict['An_GestLength']
  An_AgeDay = var_dict['An_AgeDay']
  Fet_BWbrth = var_dict['Fet_BWbrth']
  An_LactDay = var_dict['An_LactDay']
  An_Parity_rl = var_dict['An_Parity_rl']
  Trg_MilkFatp = var_dict['Trg_MilkFatp']
  Trg_MilkTPp = var_dict['Trg_MilkTPp']
  Trg_MilkLacp = var_dict['Trg_MilkLacp']
  Trg_RsrvGain = var_dict['Trg_RsrvGain']

  # Call the functions with the extracted values
  Trg_MEuse = calculate_ME_requirement(An_BW, Dt_DMIn, Trg_MilkProd, An_BW_mature,
                                       Trg_FrmGain, An_GestDay, An_GestLength,
                                       An_AgeDay, Fet_BWbrth, An_LactDay,
                                       An_Parity_rl, Trg_MilkFatp, Trg_MilkTPp,
                                       Trg_MilkLacp, Trg_RsrvGain)
      
  return(Trg_MEuse)


#' Execute MP function with a dataframe 
#'
#' This is a helper function takes a data frame as input with 1 row of data and the following
#' columns and is given to [calculate_MP_requirement]: 
#' "Dt_NDFIn", "An_BW", "Dt_DMIn", "Trg_MilkProd", "An_BW_mature", "Trg_FrmGain", 
#' "An_GestDay", "An_GestLength", "An_AgeDay", "Fet_BWbrth", "An_LactDay", 
#' "An_Parity_rl", "Trg_MilkTPp", and "Trg_RsrvGain"
#'
#' The columns required in the data frame are described in the [calculate_MP_requirement] function.
#'
#' @param df_in A data frame with 1 row of data and the required columns
#'
#' @return An_MPuse_g_Trg, A single number representing the metabolizable Protein requirements (g/d)
#' 
#' @export
#'
def dev_execute_MP_requirement(df_in): 
  # check format of data frame. Would need to be 1 row only and contain the required column names.
  # 1. Select columns by name and check they are present
  required_columns = ["An_BW", "Dt_DMIn", "Trg_MilkProd", "An_BW_mature", "Trg_FrmGain", 
                      "An_GestDay", "An_GestLength", "An_AgeDay", "Fet_BWbrth", "An_LactDay", 
                      "An_Parity_rl", "Trg_MilkTPp", "Trg_RsrvGain", "Dt_NDFIn"]
  
  df_subset = (df_in[required_columns]
               .apply(pd.to_numeric, errors = 'coerce')    # convert all columns to numbers
               ) 
  
  # 2. check number of rows and provide meaningful error
  if len(df_subset.index) > 1:
     raise Exception("Number of rows is greater than 1. This function calculates ME for 1 cow at a time.")
  
  # 3. convert to dictionary called var_dict.
  # This creates a named dictionary
  var_dict = df_subset.iloc[0].to_dict()
  
  ##########################################################################
  # Calculate Metabolizable Protein
  ##########################################################################
  Dt_NDFIn = var_dict['Dt_NDFIn']
  Dt_DMIn = var_dict['Dt_DMIn']
  An_BW = var_dict['An_BW']
  An_BW_mature = var_dict['An_BW_mature']
  Trg_FrmGain = var_dict['Trg_FrmGain']
  Trg_RsrvGain = var_dict['Trg_RsrvGain']
  An_GestDay = var_dict['An_GestDay']
  An_GestLength = var_dict['An_GestLength']
  An_AgeDay = var_dict['An_AgeDay']
  Fet_BWbrth = var_dict['Fet_BWbrth']
  An_LactDay = var_dict['An_LactDay']
  An_Parity_rl = var_dict['An_Parity_rl']
  Trg_MilkProd = var_dict['Trg_MilkProd']
  Trg_MilkTPp = var_dict['Trg_MilkTPp']
  
  An_MPuse_g_Trg = calculate_MP_requirement(Dt_NDFIn, Dt_DMIn, An_BW, An_BW_mature,
                                           Trg_FrmGain, Trg_RsrvGain, An_GestDay,
                                           An_GestLength, An_AgeDay, Fet_BWbrth,
                                           An_LactDay, An_Parity_rl, Trg_MilkProd,
                                           Trg_MilkTPp)

  return(An_MPuse_g_Trg)
