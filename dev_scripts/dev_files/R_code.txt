#Trg_NEmilk_Milk <- 9.29*Trg_MilkFatp/100 + 5.85*Trg_MilkTPp/100 + 3.95*Trg_MilkLacp/100
#If milk protein and lactose are not provided, use the Tyrrell and Reid (1965) eqn.
#Trg_NEmilk_Milk <- ifelse(is.na(Trg_NEmilk_Milk), 0.36+9.69*Trg_MilkFatp/100, Trg_NEmilk_Milk)
Trg_NEmilkOut <- Trg_NEmilk_Milk * Trg_MilkProd

### Animal factors only, eqn. 2-1 ###
#Dt_DMIn_Lact1 <- (3.7 + 5.7*(An_Parity_rl-1) + 0.305*Trg_NEmilkOut + 0.022*An_BW + 
	(-0.689 - 1.87*(An_Parity_rl-1))*An_BCS) * (1 - (0.212 + 0.136*(An_Parity_rl-1)) * 
	exp(-0.053*An_LactDay))

### Animal and diet factors, eqn. 2-2. ###
#Dt_DMIn_Lact2 <- 12.0 - 0.107*Dt_ForNDF + 8.17*Dt_ADF/Dt_NDF + 0.0253*Dt_ForDNDF48_ForNDF - 
   0.328*(Dt_ADF/Dt_NDF - 0.602) * (Dt_ForDNDF48_ForNDF - 48.3) + 
   0.225*Trg_MilkProd + 0.00390*(Dt_ForDNDF48_ForNDF - 48.3) * (Trg_MilkProd - 33.1)


########################## Dry Cow Equations  ############################
#NRC 2020, Transition Cow Chapter Eqn.
#Dt_DMIn_DryCow1_FarOff <- An_BW * Dt_DMIn_BW_LateGest_i/100
#Dt_DMIn_DryCow1_Close <- An_BW * Dt_DMIn_BW_LateGest_p/100  #used to estimate close-up DMIn depression
#Switch to the group transition eqn. when less than An_PrePartWkDurat and predicted transition DMI is less than far off DMI
#Dt_DMIn_DryCow1 <- ifelse(An_PrePartWk > An_PrePartWkDurat, 
                          min(c(Dt_DMIn_DryCow1_FarOff,Dt_DMIn_DryCow1_Close)), Dt_DMIn_DryCow1_FarOff)


## from Hayirli et al., 2003 JDS
#Dt_DMIn_DryCow_AdjGest <- An_BW * (-0.756*exp(0.154*(An_GestDay-An_GestLength)))/100
#Dt_DMIn_DryCow_AdjGest <- ifelse((An_GestDay-An_GestLength) < -21, 0, Dt_DMIn_DryCow_AdjGest)
#Dt_DMIn_DryCow2 <- An_BW * 1.979/100 + Dt_DMIn_DryCow_AdjGest

###### Select the appropriate prediction for use by the model #######
#add 1 so that a selection of 0 yields the first choice, etc.
#Only 1, 2, 3, 8, 9, and 10 are NRC eqns. 
#Dt_DMIn <- switch(DMIn_eqn + 1,
	Trg_Dt_DMIn,
#	Dt_DMIn_Calf1,      #Milk fed calf
#	Dt_DMIn_Heif_NRCai, #All heifers, animal factors only, NRC equation, individual animal
#	Dt_DMIn_Heif_NRCadi, #All heifers, animal and feed factors, NRC equation, individual animal
#	Dt_DMIn_Heif_H1i,   #Holstein heifer, animal factors only, individual prepartum
#	Dt_DMIn_Heif_H2i,   #Holstein heifer, animal and feed factors, individual prepartum
#	Dt_DMIn_Heif_HJ1i,  #Holstein x Jersey heifer, animal factors only, individual prepartum
#	Dt_DMIn_Heif_HJ2i,  #Holstein x Jersey heifer, animal and feed factors, individual prepartum
#	Dt_DMIn_Lact1,      #lactating, cow factors only
#	Dt_DMIn_Lact2,      #lactating, cow and feed factors
#	Dt_DMIn_DryCow1,    #dry, NRC 2020
#	Dt_DMIn_DryCow2,    #dry, Hayirli, 2003
#	Dt_DMIn_Heif_NRCap, #All heifers, animal factors only, NRC equation, pen based intake
#	Dt_DMIn_Heif_NRCadp, #All heifers, animal and feed factors, NRC equation, pen based intake
#	Dt_DMIn_Heif_H1p,   #Holstein heifer, animal factors only, pen prepartum
#	Dt_DMIn_Heif_H2p,   #Holstein heifer, animal and feed factors, pen prepartum
#	Dt_DMIn_Heif_HJ1p,  #Holstein x Jersey heifer, animal factors only, pen prepartum
#	Dt_DMIn_Heif_HJ2p  #Holstein x Jersey heifer, animal and feed factors, pen prepartum
)

#Dt_DMIn_BW <- Dt_DMIn / An_BW
#Dt_DMIn_MBW <- Dt_DMIn / An_BW^0.75

#Calculate DMIn and AFIn for each Ingredient
f$Fd_DMIn <- Fd_DMInp * as.vector(Dt_DMIn)
f$Fd_AFIn <- ifelse(f$Fd_DM == 0, 0, f$Fd_DMIn/(f$Fd_DM / 100))

############ Calculate additional nutrients and fractions #################
#Percent of each ingredient that is Dry and Wet Forage, Pasture, and Calf Liquid feed
f$Fd_For <- 100 - f$Fd_Conc
f$Fd_ForWet <-ifelse(f$Fd_For > 50 & f$Fd_DM < 71, f$Fd_For, 0)
f$Fd_ForDry <-ifelse(f$Fd_For > 50 & f$Fd_DM >= 71, f$Fd_For, 0)
f$Fd_Past <-ifelse(f$Fd_Category == "Pasture", 100, 0); #Identify pasture for grazing calculations.
f$Fd_LiqClf <- ifelse(f$Fd_Category == "Calf Liquid Feed", 100, 0); #Redundant as already calculated in DMIn section.
#Other nutrients
f$Fd_ForNDF <- (1-f$Fd_Conc/100) * f$Fd_NDF
f$Fd_NDFnf <- f$Fd_NDF - f$Fd_NDFIP 			#N free (nf) NDF percent in Feed

f$Fd_NPNCP <- f$Fd_CP * f$Fd_NPN_CP / 100	#calculate the NPN in CP equivalent in the feed DM
                                          #Fd_NPN_CP is the % of CP coming from NPN (0-100)
f$Fd_NPN <- f$Fd_NPNCP / 6.25					#Calculate the N in the NPNCP as a percent of feed DM
f$Fd_NPNDM <- f$Fd_NPNCP / 2.81				#Estimate the mass of NPN based on urea N content
f$Fd_TP <- f$Fd_CP - f$Fd_NPNCP				#subtract the NPNCP from Fd_CP which removes the N mass

f$Fd_fHydr_FA <- 1/1.06						#Corrects for dehydration of FA in TAG
f$Fd_fHydr_FA <- ifelse(f$Fd_Category == "Fatty Acid Supplement", 1, f$Fd_fHydr_FA)
f$Fd_FAhydr <- f$Fd_FA*f$Fd_fHydr_FA 

f$Fd_NFC <- 100-f$Fd_Ash-f$Fd_NDF-f$Fd_TP-f$Fd_NPNDM-f$Fd_FAhydr
f$Fd_NFC <- ifelse(f$Fd_NFC < 0, 0, f$Fd_NFC)		 #corrected for NDFIP and NPN, MDH

f$Fd_rOM <- 100-f$Fd_Ash-f$Fd_NDF-f$Fd_St-(f$Fd_FA*f$Fd_fHydr_FA)-f$Fd_TP-f$Fd_NPNDM
	#results in quite negative values for the protein meals due to NDF: meat, feather, blood...
	#WSC is contained within rOM until soluble starch is cleaned from WSC, MDH


############ Calculate nutrient intakes for each feed ################
f$Fd_ADFIn <- f$Fd_ADF/100 * f$Fd_DMIn
f$Fd_NDFIn <- f$Fd_NDF/100 * f$Fd_DMIn
f$Fd_StIn <- f$Fd_St/100 * f$Fd_DMIn
f$Fd_NFCIn <- f$Fd_NFC/100 * f$Fd_DMIn
f$Fd_WSCIn <- f$Fd_WSC/100 * f$Fd_DMIn
f$Fd_rOMIn <- f$Fd_rOM/100 * f$Fd_DMIn
f$Fd_LgIn <- f$Fd_Lg/100 * f$Fd_DMIn
f$Fd_DigNDFIn_Base <- f$TT_dcFdNDF_Base/100 * f$Fd_NDFIn

f$Fd_ConcIn <- f$Fd_Conc/100 * f$Fd_DMIn
f$Fd_ForIn <- f$Fd_For/100 * f$Fd_DMIn 
f$Fd_ForWetIn <- f$Fd_ForWet/100  * f$Fd_DMIn
f$Fd_ForDryIn <- f$Fd_ForDry/100 * f$Fd_DMIn
f$Fd_PastIn <- f$Fd_Past/100 * f$Fd_DMIn
#Calculate Protein fraction intakes for each feed
f$Fd_CPIn <- f$Fd_CP/100 * f$Fd_DMIn 
f$Fd_TPIn <- f$Fd_TP/100 * f$Fd_DMIn 
f$Fd_NPNCPIn <- f$Fd_CPIn * f$Fd_NPN_CP/100 #Fd_NPN_CP is the % of CP that is from NPN
f$Fd_NPNIn <- f$Fd_NPNCPIn * 0.16 
f$Fd_NPNDMIn <- f$Fd_NPNCPIn / 2.81
f$Fd_CPAIn <- f$Fd_CPIn*f$Fd_CPARU/100
f$Fd_CPBIn <- f$Fd_CPIn*f$Fd_CPBRU/100
f$Fd_CPBIn_For <- f$Fd_CPIn*f$Fd_CPBRU/100*f$Fd_For/100
f$Fd_CPBIn_Conc <- f$Fd_CPIn*f$Fd_CPBRU/100*f$Fd_Conc/100
f$Fd_CPCIn <- f$Fd_CPIn*f$Fd_CPCRU/100
f$Fd_CPIn_ClfLiq <-ifelse(f$Fd_Category == "Calf Liquid Feed", f$Fd_DMIn * f$Fd_CP/100, 0)
f$Fd_CPIn_ClfDry <-ifelse(f$Fd_Category == "Calf Liquid Feed",0, f$Fd_DMIn * f$Fd_CP/100)

#### Rumen Degraded and Undegraded Protein ####
#Bayesian equation developed by Hanigan and NRC Protein Subcomm
#Note, the units are kg/d not g/d as for the NRC2001 equations
#Moved this section up from Digestion to allow calculation of DE_base.

#Calculate RUP and the fraction of B passing for each feed, kg/d
KpConc <- 5.28	   #From Bayesian fit to Digesta Flow data with Seo Kp as priors, eqn. 26 in Hanigan et al.
KpFor <- 4.87     #%/h
fCPAdu <- 0.064	#kg CPA passaing/kg of CPA
IntRUP <- -0.086 	#Intercept, kg/d
refCPIn <- 3.39  	#average CPIn for the DigestaFlow dataset, kg/d.  3/21/18, MDH

f$Fd_rdcRUPB <- 100 - (f$Fd_For * KpFor/(f$Fd_KdRUP+KpFor) + f$Fd_Conc * 
                            KpConc/(f$Fd_KdRUP+KpConc))
f$Fd_RUPBIn <- f$Fd_CPBIn * f$Fd_For/100 * KpFor/(f$Fd_KdRUP+KpFor) + 
     f$Fd_CPBIn * f$Fd_Conc/100 * KpConc/(f$Fd_KdRUP+KpConc)
f$Fd_RUPIn <- (f$Fd_CPAIn-f$Fd_NPNCPIn) * fCPAdu + f$Fd_RUPBIn + f$Fd_CPCIn + 
     IntRUP/refCPIn*f$Fd_CPIn   #refCPIn should really be the CPIn for the diet rather than a static value. Int is scaling with CPI 
#as written rather than being a true constant, but this may be better for young heifers.
f$Fd_RUP_CP <- ifelse(f$Fd_CPIn > 0, f$Fd_RUPIn/f$Fd_CPIn*100, 0)
f$Fd_RUP <- ifelse(f$Fd_CPIn > 0, f$Fd_RUPIn/f$Fd_DMIn*100, 0)
f$Fd_RDP <- ifelse(f$Fd_CPIn > 0, f$Fd_CP - f$Fd_RUP, 0)

#Calculate total fat and fatty acid intakes
f$Fd_CFatIn <- f$Fd_CFat/100 * f$Fd_DMIn
f$Fd_FAIn <- f$Fd_FA/100*f$Fd_DMIn
f$Fd_FAhydrIn <- f$Fd_FAhydr/100*f$Fd_DMIn

#Calculate intakes of specific FA for each feed
f$Fd_C120In <- f$Fd_C120_FA/100 * f$Fd_FA/100 * f$Fd_DMIn 
f$Fd_C140In <- f$Fd_C140_FA/100 * f$Fd_FA/100 * f$Fd_DMIn 
f$Fd_C160In <- f$Fd_C160_FA/100 * f$Fd_FA/100 * f$Fd_DMIn
f$Fd_C161In <- f$Fd_C161_FA/100 * f$Fd_FA/100 * f$Fd_DMIn 
f$Fd_C180In <- f$Fd_C180_FA/100 * f$Fd_FA/100 * f$Fd_DMIn 
f$Fd_C181tIn <- f$Fd_C181t_FA/100 * f$Fd_FA/100 * f$Fd_DMIn 
f$Fd_C181cIn <- f$Fd_C181c_FA/100 * f$Fd_FA/100 * f$Fd_DMIn 
f$Fd_C182In <- f$Fd_C182_FA/100 * f$Fd_FA/100 * f$Fd_DMIn 
f$Fd_C183In <- f$Fd_C183_FA/100 * f$Fd_FA/100 * f$Fd_DMIn 
f$Fd_OtherFAIn <- f$Fd_OtherFA_FA/100 * f$Fd_FA/100 * f$Fd_DMIn 

f$Fd_AshIn <- f$Fd_Ash/100 * f$Fd_DMIn
f$Fd_OMIn <- f$Fd_DMIn - f$Fd_AshIn
f$Fd_GEIn <- f$Fd_GE * f$Fd_DMIn

#Base Digestible Energy values calculated from nutrients.  Also calculated in software interface and provided in the Feed Library. Not discounted.
#Standard Equation 1 - IVNDF not used
f$Fd_DE_base_1 <- 0.75*(f$Fd_NDF-f$Fd_Lg)*(1-((f$Fd_Lg / ifelse(f$Fd_NDF==0, 1e-9, f$Fd_NDF))^0.667))*0.042 +
     f$Fd_St*f$Fd_dcSt/100*0.0423 + f$Fd_FA*f$Fd_dcFA/100*0.094 + 
     (100-(f$Fd_FA/1.06)-f$Fd_Ash-f$Fd_NDF-f$Fd_St-(f$Fd_CP-(f$Fd_NPNCP-f$Fd_NPNCP/2.81)))*0.96*0.04 + 
     ((f$Fd_CP-f$Fd_RUP/100*f$Fd_CP)+f$Fd_RUP/100*f$Fd_CP*f$Fd_dcRUP/100-f$Fd_NPNCP)*0.0565 + 
     f$Fd_NPNCP*0.0089 - (0.137+0.093+0.088)
#Standard equation 2 - based on setting of IVNDF use switch
f$Fd_DE_base_2 <- ((0.12+0.0061*f$Fd_DNDF48_NDF)*f$Fd_NDF*0.042) + (f$Fd_St*f$Fd_dcSt/100*0.0423) + 
     (f$Fd_FA*f$Fd_dcFA/100*0.094) + ((100-(f$Fd_FA/1.06)-(f$Fd_CP-(f$Fd_NPNCP-f$Fd_NPNCP/2.81))-f$Fd_Ash-f$Fd_NDF-
     f$Fd_St)*0.96*0.04) + ((f$Fd_CP-f$Fd_RUP/100*f$Fd_CP)+f$Fd_RUP/100*f$Fd_CP*f$Fd_dcRUP/100-f$Fd_NPNCP)*0.0565 + 
     f$Fd_NPNCP*0.0089 - (0.137+0.093+0.088)
f$Use_DNDF_IV <- as.vector(Use_DNDF_IV)
f$Fd_DE_base <- ifelse(f$Use_DNDF_IV == 0, f$Fd_DE_base_1, f$Fd_DE_base_2)
f$Fd_DE_base <- ifelse(f$Use_DNDF_IV == 1 & f$Fd_For == 0, f$Fd_DE_base_1, f$Fd_DE_base)
f$Fd_DE_base <- ifelse(f$Fd_Category == "Animal Protein",
                    0.73*f$Fd_FA*0.094 + (f$Fd_RDP + (f$Fd_RUP*f$Fd_dcRUP))*0.056 + (0.96*(100-
                    f$Fd_FA/1.06-f$Fd_CP-f$Fd_Ash)*0.04)-0.318, f$Fd_DE_base) #where RDP and RUP are % of CP
f$Fd_DE_base <- ifelse(f$Fd_Category == "Fat Supplement",
                    f$Fd_FA*f$Fd_dcFA/100*0.094 + (100-f$Fd_Ash-(f$Fd_FA/1.06)*0.96)*0.043-0.318, f$Fd_DE_base)
f$Fd_DE_base <- ifelse(f$Fd_Category == "Fatty Acid Supplement", f$Fd_FA*f$Fd_dcFA/100*0.094-0.318, f$Fd_DE_base)
f$Fd_DE_base <- ifelse(f$Fd_Category == "Calf Liquid Feed", (0.094*f$Fd_FA+0.057*f$Fd_CP+0.04*(100-f$Fd_Ash-f$Fd_CP-f$Fd_FA))*0.95, f$Fd_DE_base)
f$Fd_DE_base <- ifelse(f$Fd_Category == "Sugar/Sugar Alcohol", (100-f$Fd_Ash)*0.04*0.96-0.318, f$Fd_DE_base)
f$Fd_DE_base <- ifelse(f$Fd_Category == "Vitamin/Mineral", 0, f$Fd_DE_base)
f$Fd_DE_base <- ifelse(f$Fd_Category == "Vitamin/Mineral" & f$Fd_NPN>0, (f$Fd_CP*0.089)-0.318, f$Fd_DE_base)
#According to Weiss, need to set urea, ammonium phoshate and other NPN sources to: (Fd_CP * 0.089) - 0.318. 
#It appears they are set to 0 in the software, rather than as Bill specified. MDH

f$Fd_DEIn_base <- f$Fd_DE_base * f$Fd_DMIn
f$Fd_DEIn_base_ClfLiq <-ifelse(f$Fd_Category == "Calf Liquid Feed",f$Fd_DEIn_base, 0)
f$Fd_DEIn_base_ClfDry <-ifelse(f$Fd_Category == "Calf Liquid Feed",0, f$Fd_DEIn_base)

############### Calculate Dietary DM and AF Intakes ##################
#Dt_DMInSum <- sum(f$Fd_DMIn, na.rm=TRUE)
#Dt_AFIn <- sum(f$Fd_AFIn, na.rm=TRUE)

# Calculate the AF and DM ingredient inclusion rates
f$Fd_DMInp <- f$Fd_DMIn / Dt_DMIn * 100
f$Fd_AFInp <- f$Fd_AFIn / Dt_AFIn * 100

#Calculate Dietary Nutrient Intakes
#Dt_NDFIn <- sum(f$Fd_NDFIn, na.rm=TRUE)
#Dt_NDFnfIn <- sum(f$Fd_NDFnf/100*f$Fd_DMIn, na.rm=TRUE)
#Dt_ADFIn <- sum(f$Fd_ADFIn, na.rm=TRUE)
#Dt_LgIn <- sum(f$Fd_LgIn, na.rm=TRUE)
#Dt_Lg_NDF <- Dt_LgIn / Dt_NDFIn * 100
#Dt_ForNDFIn <- sum(f$Fd_ForNDF/100*f$Fd_DMIn, na.rm=TRUE)
#Dt_DigNDFIn_Base <- sum(f$Fd_DigNDFIn_Base, na.rm=TRUE)
#Dt_ForWetIn <- sum(f$Fd_ForWetIn, na.rm=TRUE)
#Dt_ForDryIn <- sum(f$Fd_ForDryIn, na.rm=TRUE)
#Dt_PastIn <- sum(f$Fd_PastIn, na.rm=TRUE)
#Dt_PastSupplIn <- Dt_DMInSum - Dt_PastIn;		#Could be supplemental concentrate or forage.
#Dt_ForIn <- sum(f$Fd_ForIn, na.rm=TRUE)
#Dt_ConcIn <- sum(f$Fd_ConcIn, na.rm=TRUE)

#Dt_NFCIn <- sum(f$Fd_NFCIn, na.rm=TRUE)
#Dt_StIn <- sum(f$Fd_StIn, na.rm=TRUE)
#Dt_WSCIn <- sum(f$Fd_WSCIn, na.rm=TRUE)

#Dt_CPIn <- sum(f$Fd_CPIn, na.rm=TRUE)
#Dt_CPIn_ClfLiq <- sum(f$Fd_CPIn_ClfLiq, na.rm=TRUE)
#Dt_TPIn <- sum(f$Fd_TPIn, na.rm=TRUE)
#Dt_NPNCPIn <- sum(f$Fd_NPNCPIn, na.rm=TRUE)
#Dt_NPNIn <- sum(f$Fd_NPNIn, na.rm=TRUE)
#Dt_NPNDMIn <- sum(f$Fd_NPNDMIn, na.rm=TRUE)
#Dt_CPAIn <- sum(f$Fd_CPAIn, na.rm=TRUE)
#Dt_CPBIn <- sum(f$Fd_CPBIn, na.rm=TRUE)
#Dt_CPCIn <- sum(f$Fd_CPCIn, na.rm=TRUE)
#Dt_NIn <- Dt_CPIn / 6.25
#Dt_RUPBIn <- sum(f$Fd_RUPBIn, na.rm=TRUE)
#Dt_RUPIn <- sum(f$Fd_RUPIn, na.rm=TRUE)
#Dt_RUPIn <- ifelse(Dt_RUPIn < 0, 0, Dt_RUPIn)
#The following diet level RUPIn is slightly more accurate than the feed level summation as the intercept exactly matches the regression equations, but feed level is very close.
#Dt_RUPIn.dt <- (Dt_CPAIn-Dt_NPNIn) * fCPAdu + Dt_RUPBIn + Dt_CPCIn + IntRUP  #if concerned about intercept, switch to using this eqn for RUP
#Dt_RUP <- Dt_RUPIn / Dt_DMIn *100
#Dt_RUP_CP <- Dt_RUPIn / Dt_CPIn * 100
#Dt_fCPBdu <- Dt_RUPBIn / Dt_CPBIn



#Dt_CFatIn <- sum(f$Fd_CFatIn, na.rm=TRUE)
#Dt_FAIn <- sum(f$Fd_FAIn, na.rm=TRUE)
#Dt_FAhydrIn <- sum(f$Fd_FAhydrIn, na.rm=TRUE)
#Dt_C120In <- sum(f$Fd_C120In, na.rm=TRUE)
#Dt_C140In <- sum(f$Fd_C140In, na.rm=TRUE)
#Dt_C160In <- sum(f$Fd_C160In, na.rm=TRUE)
#Dt_C161In <- sum(f$Fd_C161In, na.rm=TRUE)
#Dt_C180In <- sum(f$Fd_C180In, na.rm=TRUE)
#Dt_C181tIn <- sum(f$Fd_C181tIn, na.rm=TRUE)
#Dt_C181cIn <- sum(f$Fd_C181cIn, na.rm=TRUE)
#Dt_C182In <- sum(f$Fd_C182In, na.rm=TRUE)
#Dt_C183In <- sum(f$Fd_C183In, na.rm=TRUE)
#Dt_OtherFAIn <- sum(f$Fd_OtherFAIn, na.rm=TRUE)
#Dt_UFAIn <- Dt_C161In + Dt_C181tIn+ Dt_C181cIn + Dt_C182In + Dt_C183In
#Dt_MUFAIn <- Dt_C161In + Dt_C181tIn+ Dt_C181cIn
#Dt_PUFAIn <- Dt_UFAIn - (Dt_C161In + Dt_C181tIn+ Dt_C181cIn)
#Dt_SatFAIn <- Dt_FAIn - Dt_UFAIn

#Dt_AshIn <- sum(f$Fd_AshIn, na.rm=TRUE)
#Dt_OMIn <- Dt_DMIn - Dt_AshIn
#Dt_rOMIn <- Dt_DMIn-Dt_AshIn-Dt_NDFIn-Dt_StIn-Dt_FAhydrIn-Dt_TPIn-Dt_NPNDMIn #Is negative on some diets. Some Ash and CP in NDF, and
#Dt_rOMIn <- ifelse(Dt_rOMIn < 0, 0, Dt_rOMIn)                                #water from FAhydr in TAG contributes.  Trap negative Dt values.
                                                                             #More likely due to entry errors or bad analyses of other nutrients.
#Dt_GEIn <- sum(f$Fd_GEIn, na.rm=TRUE)
#Dt_DEIn_base <- sum(f$Fd_DEIn_base, na.rm=TRUE)
#Dt_DEIn_base_ClfLiq <- sum(f$Fd_DEIn_base_ClfLiq, na.rm=TRUE)
#Dt_DEIn_base_ClfDry <- sum(f$Fd_DEIn_base_ClfDry, na.rm=TRUE)

#Calculate Dietary Nutrient Concentrations
#Dt_DM <- Dt_DMIn / Dt_AFIn * 100
#Dt_OM <- Dt_OMIn / Dt_DMIn * 100
#Dt_NDF <- Dt_NDFIn / Dt_DMIn * 100
#Dt_NDFIn_BW <- Dt_NDFIn / An_BW * 100
#Dt_NDFnf <- Dt_NDFnfIn / Dt_DMIn * 100
#Dt_ADF <- Dt_ADFIn / Dt_DMIn * 100
#Dt_Lg <- Dt_LgIn / Dt_DMIn * 100
#Dt_ForNDF <- Dt_ForNDFIn / Dt_DMIn * 100
#Dt_ForNDF_NDF <- Dt_ForNDF/Dt_NDF*100
#Dt_ForNDFIn_BW <- Dt_ForNDFIn / An_BW * 100

#Dt_NFC <- Dt_NFCIn / Dt_DMIn * 100
#Dt_St <- Dt_StIn / Dt_DMIn * 100
#Dt_WSC <- Dt_WSCIn / Dt_DMIn * 100
#Dt_rOM <- Dt_rOMIn / Dt_DMIn * 100

#Dt_CFat <- Dt_CFatIn / Dt_DMIn * 100
#Dt_FA <- Dt_FAIn / Dt_DMIn * 100
#Dt_FAhydr <- Dt_FAhydrIn / Dt_DMIn * 100

#Dt_CP <- Dt_CPIn / Dt_DMIn * 100
#Dt_TP <- Dt_TPIn / Dt_DMIn * 100
#Dt_NPNCP <- Dt_NPNCPIn / Dt_DMIn * 100
#Dt_NPN <- Dt_NPNIn / Dt_DMIn * 100
#Dt_NPNDM <- Dt_NPNDMIn / Dt_DMIn * 100

#Dt_CPA <- Dt_CPAIn / Dt_DMIn * 100
#Dt_CPB <- Dt_CPBIn / Dt_DMIn * 100
#Dt_CPC <- Dt_CPCIn / Dt_DMIn * 100
#Dt_CPA_CP <- Dt_CPAIn / Dt_CPIn * 100
#Dt_CPB_CP <- Dt_CPBIn / Dt_CPIn * 100
#Dt_CPC_CP <- Dt_CPCIn / Dt_CPIn * 100

#Dt_Ash <- Dt_AshIn / Dt_DMIn * 100

#Dt_ForWet <- Dt_ForWetIn / Dt_DMIn * 100
#Dt_ForDry <- Dt_ForDryIn / Dt_DMIn * 100
#Dt_For <- Dt_ForIn / Dt_DMIn * 100
#Dt_Conc <- Dt_ConcIn / Dt_DMIn * 100

#FA as a % of DM
#Dt_C120 <- Dt_C120In / Dt_DMIn * 100
#Dt_C140 <- Dt_C140In / Dt_DMIn * 100
#Dt_C160 <- Dt_C160In / Dt_DMIn * 100
#Dt_C161 <- Dt_C161In / Dt_DMIn * 100
#Dt_C180 <- Dt_C180In / Dt_DMIn * 100
#Dt_C181t <- Dt_C181tIn / Dt_DMIn * 100
#Dt_C181c <- Dt_C181cIn / Dt_DMIn * 100
#Dt_C182 <- Dt_C182In / Dt_DMIn * 100
#Dt_C183 <- Dt_C183In / Dt_DMIn * 100
#Dt_OtherFA <- Dt_OtherFAIn / Dt_DMIn * 100
#Dt_UFA <- Dt_UFAIn / Dt_DMIn * 100
#Dt_MUFA <- Dt_MUFAIn / Dt_DMIn * 100
#Dt_PUFA <- Dt_PUFAIn / Dt_DMIn * 100
#Dt_SatFA <- Dt_SatFAIn / Dt_DMIn * 100

#FA as a percent of total FA
#Dt_C120_FA <- Dt_C120In / Dt_FAIn * 100
#Dt_C140_FA <- Dt_C140In / Dt_FAIn * 100
#Dt_C160_FA <- Dt_C160In / Dt_FAIn * 100
#Dt_C161_FA <- Dt_C161In / Dt_FAIn * 100
#Dt_C180_FA <- Dt_C180In / Dt_FAIn * 100
#Dt_C181t_FA <- Dt_C181tIn / Dt_FAIn * 100
#Dt_C181c_FA <- Dt_C181cIn / Dt_FAIn * 100
#Dt_C182_FA <- Dt_C182In / Dt_FAIn * 100
#Dt_C183_FA <- Dt_C183In / Dt_FAIn * 100
#Dt_OtherFA_FA <- Dt_OtherFAIn / Dt_FAIn * 100
#Dt_UFA_FA <- Dt_UFAIn / Dt_FAIn * 100
#Dt_MUFA_FA <- Dt_MUFAIn / Dt_FAIn * 100
#Dt_PUFA_FA <- Dt_PUFAIn / Dt_FAIn * 100
#Dt_SatFA_FA <- Dt_SatFAIn / Dt_FAIn * 100

#==============================================================#
#Macro Mineral Intakes from each ingredient, g/d;
f$Fd_CaIn = f$Fd_DMIn*f$Fd_Ca/100 * 1000
f$Fd_PIn = f$Fd_DMIn*f$Fd_P/100 * 1000
f$Fd_PinorgIn = f$Fd_PIn*f$Fd_Pinorg_P/100; #??Check Bill's text
f$Fd_PorgIn = f$Fd_PIn*f$Fd_Porg_P/100      #f$Fd_PphytIn = f$Fd_PIn*f$Fd_Pphyt_P/100 #Depracated by Bill.  Reduced to inorganic and organic.
f$Fd_NaIn = f$Fd_DMIn*f$Fd_Na/100 * 1000
f$Fd_MgIn = f$Fd_DMIn*f$Fd_Mg/100 * 1000
f$Fd_MgIn_min = ifelse(f$Fd_Category=="Vitamin/Mineral",f$Fd_DMIn*f$Fd_Mg/100*1000,0)  #Mg from vitamins and minerals only.
f$Fd_KIn = f$Fd_DMIn*f$Fd_K/100 * 1000
f$Fd_ClIn = f$Fd_DMIn*f$Fd_Cl/100 * 1000
f$Fd_SIn = f$Fd_DMIn*f$Fd_S/100 * 1000

#Micro Mineral Intakes from each ingredient, mg/d;
f$Fd_CoIn = f$Fd_DMIn*f$Fd_Co
f$Fd_CrIn = f$Fd_DMIn*f$Fd_Cr
f$Fd_CuIn = f$Fd_DMIn*f$Fd_Cu
f$Fd_FeIn = f$Fd_DMIn*f$Fd_Fe
f$Fd_IIn = f$Fd_DMIn*f$Fd_I
f$Fd_MnIn = f$Fd_DMIn*f$Fd_Mn
f$Fd_MoIn = f$Fd_DMIn*f$Fd_Mo
f$Fd_SeIn = f$Fd_DMIn*f$Fd_Se
f$Fd_ZnIn = f$Fd_DMIn*f$Fd_Zn

#Vitamin Intakes, IU/d;
f$Fd_VitAIn = f$Fd_DMIn*f$Fd_VitA
f$Fd_VitDIn = f$Fd_DMIn*f$Fd_VitD
f$Fd_VitEIn = f$Fd_DMIn*f$Fd_VitE
#Vitamin Intakes, mg/d;
f$Fd_CholineIn = f$Fd_DMIn*f$Fd_Choline
f$Fd_BiotinIn = f$Fd_DMIn*f$Fd_Biotin
f$Fd_NiacinIn = f$Fd_DMIn*f$Fd_Niacin
f$Fd_B_CaroteneIn = f$Fd_DMIn*f$Fd_B_Carotene

#Total Dietary Macro Mineral Intakes, g/d
#Dt_CaIn <- sum(f$Fd_CaIn, na.rm=TRUE)
#Dt_PIn <- sum(f$Fd_PIn, na.rm=TRUE)
#Dt_PinorgIn <- sum(f$Fd_PinorgIn, na.rm=TRUE)
#Dt_PorgIn <- sum(f$Fd_PorgIn, na.rm=TRUE)   #Dt_PphytIn <- sum(f$Fd_PphytIn, na.rm=TRUE)  #PphytIn depracatated
#Dt_NaIn <- sum(f$Fd_NaIn, na.rm=TRUE)
#Dt_MgIn <- sum(f$Fd_MgIn, na.rm=TRUE)
#Dt_MgIn_min <- sum(f$Fd_MgIn_min, na.rm=TRUE)
#Dt_KIn <- sum(f$Fd_KIn, na.rm=TRUE)
#Dt_ClIn <- sum(f$Fd_ClIn, na.rm=TRUE)
#Dt_SIn <- sum(f$Fd_SIn, na.rm=TRUE)

#Total Dietary Micro Mineral Intakes, mg/d
#Dt_CoIn <- sum(f$Fd_CoIn, na.rm=TRUE)
#Dt_CrIn <- sum(f$Fd_CrIn, na.rm=TRUE)
#Dt_CuIn <- sum(f$Fd_CuIn, na.rm=TRUE)
#Dt_FeIn <- sum(f$Fd_FeIn, na.rm=TRUE)
#Dt_IIn <- sum(f$Fd_IIn, na.rm=TRUE)
#Dt_MnIn <- sum(f$Fd_MnIn, na.rm=TRUE)
#Dt_MoIn <- sum(f$Fd_MoIn, na.rm=TRUE)
#Dt_SeIn <- sum(f$Fd_SeIn, na.rm=TRUE)
#Dt_ZnIn <- sum(f$Fd_ZnIn, na.rm=TRUE)

#Total Dietary Vitamin Intakes
#Dt_VitAIn <- sum(f$Fd_VitAIn, na.rm=TRUE);	#IU/d
#Dt_VitDIn <- sum(f$Fd_VitDIn, na.rm=TRUE )
#Dt_VitEIn <- sum(f$Fd_VitEIn, na.rm=TRUE)
#Dt_CholineIn <- sum(f$Fd_CholineIn, na.rm=TRUE);	#mg/d
#Dt_BiotinIn <- sum(f$Fd_BiotinIn, na.rm=TRUE)
#Dt_NiacinIn <- sum(f$Fd_NiacinIn, na.rm=TRUE)
#Dt_B_CaroteneIn <- sum(f$Fd_B_CaroteneIn, na.rm=TRUE)

#Calculate dietary Min/Vit concentrations
#Macro Minerals, % of DM
#Dt_Ca <- Dt_CaIn / Dt_DMIn /1000 * 100
#Dt_P <- Dt_PIn / Dt_DMIn /1000 * 100